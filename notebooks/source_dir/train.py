import argparse  # Used for parsing command-line arguments
import logging  # Provides a logging interface
import os  # Provides a way of using operating system dependent functionality

# Importing MLflow and its sklearn integration for model tracking and management
import mlflow
import mlflow.sklearn
import numpy as np  # Fundamental package for scientific computing
import pandas as pd  # Data manipulation and analysis library

# SGDClassifier is a linear classifiers (SVM, logistic regression, etc.) with
# SGD training
from sklearn.linear_model import SGDClassifier
from sklearn.metrics import average_precision_score

# Configure logging to display information messages
logging.basicConfig(level=logging.INFO)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    # Define command-line arguments related to MLflow for experiment tracking
    parser.add_argument("--tracking_uri", type=str)
    parser.add_argument("--experiment_name", type=str)
    # Define command-line arguments for hyperparameters
    parser.add_argument("--alpha", type=float, default=0.0001)
    parser.add_argument("--l1_ratio", type=float, default=0.15)

    # Arguments for specifying model, data directories, and data files
    parser.add_argument("--model-dir", type=str, default=os.environ.get("SM_MODEL_DIR"))
    parser.add_argument("--train", type=str, default=os.environ.get("SM_CHANNEL_TRAIN"))
    parser.add_argument("--test", type=str, default=os.environ.get("SM_CHANNEL_TEST"))
    parser.add_argument("--train-file", type=str)
    parser.add_argument("--test-file", type=str)
    parser.add_argument("--features", type=str)
    parser.add_argument("--target", type=str)

    # Parse the known command-line arguments
    args, _ = parser.parse_known_args()

    logging.info("reading data")
    chunksize = 20000  # Size of the data chunks to be read
    # Read training data in chunks
    train_df = pd.read_csv(
        os.path.join(args.train, args.train_file),
        chunksize=chunksize,
        iterator=True,
        engine="python",
    )
    # Read test data in chunks
    test_df = pd.read_csv(
        os.path.join(args.test, args.test_file),
        chunksize=chunksize,
        iterator=True,
        engine="python",
    )

    # Set MLflow tracking URI and experiment name for logging
    mlflow.set_tracking_uri(args.tracking_uri)
    mlflow.set_experiment(args.experiment_name)

    with mlflow.start_run():
        # Log the hyperparameters
        params = {
            "alpha": args.alpha,
            "l1_ratio": args.l1_ratio,
        }
        mlflow.log_params(params)

        logging.info("training model")
        # Initialize the SGDClassifier model with specified hyperparameters
        model = SGDClassifier(
            loss="log",  # Use logistic regression
            penalty="elasticnet",  # Use Elastic Net regularization
            alpha=args.alpha,
            l1_ratio=args.l1_ratio,
            shuffle=True,  # Shuffle training data before each epoch
            n_jobs=-1,  # Use all available CPUs
        )
        # Train the model on each chunk of training data
        for chunk in train_df:
            model.partial_fit(
                chunk[args.features.split()], chunk[args.target], classes=[0.0, 1.0]
            )

        logging.info("evaluating model")
        y_true = pd.Series(dtype=float)
        # Evaluate the model on test data and log performance metrics
        for chunk in test_df:
            if y_true.empty:
                y_scores = model.predict(chunk[args.features.split()])
                y_true = chunk[args.target]
            else:
                y_scores = np.concatenate(
                    [y_scores, model.predict(chunk[args.features.split()])]
                )
                y_true = pd.concat([y_true, chunk[args.target]])

        # Log average precision score
        logging.info(f"avg-precision: {average_precision_score(y_true, y_scores)}")
        mlflow.log_metric("avg-precision", average_precision_score(y_true, y_scores))

        logging.info("saving model in MLflow")
        # Log the trained model in MLflow for versioning, packaging, deployment,
        # and reproducibility
        mlflow.sklearn.log_model(model, "model")
