import argparse  # For parsing command-line arguments
import logging  # Facilitates logging of messages
import os  # Provides functions for interacting with the operating system

import joblib  # Utilities for saving and loading Python objects
import numpy as np  # Fundamental package for scientific computing
import pandas as pd  # Data manipulation and analysis library

# Import SGDClassifier for linear classification with stochastic gradient descent
from sklearn.linear_model import SGDClassifier
from sklearn.metrics import average_precision_score  # For model evaluation

# For model evaluation
logging.basicConfig(level=logging.INFO)


def model_fn(model_dir: str):
    """Loads a saved model from a specified directory.

    This function is typically used in machine learning deployment scenarios,
    where a trained model saved on disk needs to be loaded for prediction
    purposes.

    Args:
        model_dir: A string specifying the directory where the model file
                   ('model.joblib') is saved.

    Returns:
        The model loaded from 'model.joblib' file within the specified
        directory.
    """
    model = joblib.load(os.path.join(model_dir, "model.joblib"))
    return model


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    # Define command-line arguments for model hyperparameters
    parser.add_argument("--alpha", type=float, default=0.0001)
    parser.add_argument("--l1_ratio", type=float, default=0.15)

    # Arguments for specifying model, data directories, and data files
    parser.add_argument("--model-dir", type=str, default=os.environ.get("SM_MODEL_DIR"))
    parser.add_argument("--train", type=str, default=os.environ.get("SM_CHANNEL_TRAIN"))
    parser.add_argument(
        "--validation", type=str, default=os.environ.get("SM_CHANNEL_VALIDATION")
    )
    parser.add_argument("--train-file", type=str)
    parser.add_argument("--validation-file", type=str)
    parser.add_argument("--features", type=str)
    parser.add_argument("--target", type=str)

    # Parse the known command-line arguments
    args, _ = parser.parse_known_args()

    logging.info("reading data")
    chunksize = 20000  # Size of the data chunks to be read
    # Read training data in chunks
    train_df = pd.read_csv(
        os.path.join(args.train, args.train_file),
        chunksize=chunksize,
        iterator=True,
        engine="python",
    )
    # Read validation data in chunks
    validation_df = pd.read_csv(
        os.path.join(args.validation, args.validation_file),
        chunksize=chunksize,
        iterator=True,
        engine="python",
    )

    logging.info("training model")
    # Initialize the SGDClassifier model with specified hyperparameters
    model = SGDClassifier(
        loss="log",  # Use logistic regression
        penalty="elasticnet",  # Use Elastic Net regularization
        alpha=args.alpha,
        l1_ratio=args.l1_ratio,
        shuffle=True,  # Shuffle training data before each epoch
        n_jobs=-1,
    )  # Use all available CPUs
    # Train the model on each chunk of training data
    for chunk in train_df:
        model.partial_fit(
            chunk[args.features.split()], chunk[args.target], classes=[0.0, 1.0]
        )

    logging.info("evaluating model")
    # Evaluate the model on validation data
    y_true = pd.Series(dtype=float)
    for chunk in validation_df:
        if y_true.empty:
            y_scores = model.predict(chunk[args.features.split()])
            y_true = chunk[args.target]
        else:
            y_scores = np.concatenate(
                [y_scores, model.predict(chunk[args.features.split()])]
            )
            y_true = pd.concat([y_true, chunk[args.target]])

    # Log the average precision score
    logging.info(f"avg-precision: {average_precision_score(y_true, y_scores)}")

    # Save the trained model
    path = os.path.join(args.model_dir, "model.joblib")
    joblib.dump(model, path)
    print(f"Model saved to {path}")
